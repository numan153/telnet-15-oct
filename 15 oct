import pexpect
import time  # Added to introduce small delays if needed

# Define variables
ip_address = '192.168.56.101'
username = 'cisco'
password = 'cisco123!'
new_hostname = 'R1'

# Log Telnet session for debugging
session_log = open('telnet_session_log.txt', 'w')

# Start Telnet session
print('--- Starting Telnet session...')
session = pexpect.spawn('telnet ' + ip_address, encoding='utf-8', timeout=60)
session.logfile = session_log  # Enable logging to file

# Check for the username prompt
result = session.expect(['Username:', pexpect.TIMEOUT, pexpect.EOF])

if result != 0:
    print(f'--- FAILURE! Creating Telnet session for: {ip_address}')
    session_log.close()
    exit()

# Send the username
session.sendline(username)
result = session.expect(['Password:', pexpect.TIMEOUT, pexpect.EOF])

if result != 0:
    print(f'--- Failure! Entering username: {username}')
    session_log.close()
    exit()

# Send the password
session.sendline(password)
result = session.expect(['#', pexpect.TIMEOUT, pexpect.EOF])

if result != 0:
    print(f'--- FAILURE! Entering password: {password}')
    session_log.close()
    exit()

print('--- Success! Telnet session established.')

# Enter enable mode
print('--- Entering enable mode...')
session.sendline('enable')
result = session.expect(['Password:', '#', pexpect.TIMEOUT, pexpect.EOF])

if result == 1:
    print('--- Already in enable mode.')
elif result == 0:
    # Send enable password
    session.sendline(password)
    result = session.expect(['#', pexpect.TIMEOUT, pexpect.EOF])

    if result != 0:
        print('--- Failure! Entering enable mode after sending password')
        session_log.close()
        exit()
else:
    print('--- Failure! Unexpected response when entering enable mode')
    session_log.close()
    exit()

# Enter configuration mode
print('--- Entering configuration mode...')
session.sendline('configure terminal')
result = session.expect([r'\(config\)#', pexpect.TIMEOUT, pexpect.EOF])

if result != 0:
    print('--- Failure! Entering config mode')
    session_log.close()
    exit()

# Change the hostname to R1
print(f'--- Changing hostname to {new_hostname}...')
session.sendline(f'hostname {new_hostname}')
result = session.expect([rf'{new_hostname}\(config\)#', pexpect.TIMEOUT, pexpect.EOF])

if result != 0:
    print(f'--- Failure! Setting hostname to {new_hostname}')
    session_log.close()
    exit()

# Exit configuration mode
print('--- Exiting configuration mode...')
session.sendline('exit')
session.expect(['#', pexpect.TIMEOUT, pexpect.EOF])

# Wait briefly for the changes to apply
time.sleep(1)

# Send command to output the running configuration
print('--- Retrieving running configuration...')
session.sendline('show running-config')

# Initialize an empty string to store the running configuration
running_config_output = ""

# Loop to capture all output, including handling the "more" prompt
while True:
    result = session.expect(['--More--', '#', pexpect.TIMEOUT, pexpect.EOF])
    
    if result == 0:
        # If we see the "More" prompt, send space to continue
        session.sendline(' ')
    elif result == 1:
        # If we see the prompt, we've captured all the output
        running_config_output += session.before  # Capture everything before the prompt
        break
    else:
        # Handle timeout or EOF
        print('--- Timeout or unexpected EOF while retrieving running configuration.')
        break

# Save running configuration to a file
with open('telnet_running_config.txt', 'w') as config_file:
    config_file.write(running_config_output)
print('--- Running configuration saved to telnet_running_config.txt')

# Exit Telnet session
print('--- Closing Telnet session...')
session.sendline('quit')

# Display success message if everything worked
print('------------------------------------------------------')
print('')
print(f'--- Success! Connecting to: {ip_address}')
print(f'---               Username: {username}')
print(f'---               Password: {password}')
print('')
print('------------------------------------------------------')

# Close the Telnet session
session.close()
session_log.close()
