import pexpect

# Define variables
ip_address = '192.168.56.101'
username = 'cisco'
password = 'cisco123!'
new_hostname = 'R1'  # New hostname to be set

# Log session for debugging
session_log = open('telnet_session_log.txt', 'w')

# Start Telnet session
print('--- Starting Telnet session...')
session = pexpect.spawn('telnet ' + ip_address, encoding='utf-8', timeout=20)
session.logfile = session_log  # Enable logging to file

# Check for username prompt
result = session.expect(['Username:', pexpect.TIMEOUT])

if result != 0:
    print('--- FAILURE! creating Telnet session for: ', ip_address)
    session_log.close()
    exit()

# Send the username
session.sendline(username)
result = session.expect(['Password:', pexpect.TIMEOUT])

if result != 0:
    print('--- Failure! entering username: ', username)
    session_log.close()
    exit()

# Send the password
session.sendline(password)
result = session.expect(['#', pexpect.TIMEOUT])

if result != 0:
    print('--- FAILURE! entering password: ', password)
    session_log.close()
    exit()

print('--- Success! Telnet session established.')

# Enter configuration mode
print('--- Entering configuration mode...')
session.sendline('configure terminal')
result = session.expect([r'.\(config\)#', pexpect.TIMEOUT])

if result != 0:
    print('--- Failure! entering config mode')
    session_log.close()
    exit()

# Change the hostname to R1
print(f'--- Changing hostname to {new_hostname}...')
session.sendline(f'hostname {new_hostname}')
result = session.expect([rf'{new_hostname}\(config\)#', pexpect.TIMEOUT])

if result != 0:
    print(f'--- Failure! setting hostname to {new_hostname}')
    session_log.close()
    exit()

# Exit configuration mode
print('--- Exiting configuration mode...')
session.sendline('exit')
result = session.expect(['#', pexpect.TIMEOUT])

if result != 0:
    print('--- Failure! exiting config mode')
    session_log.close()
    exit()

# Send command to output the running configuration
print('--- Retrieving running configuration...')
session.sendline('show running-config')

# Capture the running configuration
running_config_output = ""

while True:
    result = session.expect(['--More--', '#', pexpect.TIMEOUT, pexpect.EOF])
    
    if result == 0:  # If we see the more prompt
        running_config_output += session.before  # Capture output before the prompt
        session.sendline(' ')  # Send space to continue to the next page
    elif result == 1:  # If we see the final prompt
        running_config_output += session.before  # Capture the last output before the prompt
        break  # Exit the loop when the final output is reached
    else:
        print('--- Timeout or unexpected EOF while retrieving running configuration.')
        break

# Save running configuration to a file
with open('telnet_running_config.txt', 'w') as config_file:
    config_file.write(running_config_output)  # Write the output directly
print('--- Running configuration saved to telnet_running_config.txt')

# Exit Telnet session
print('--- Closing Telnet session...')
session.sendline('quit')

# Display success message if everything worked
print('------------------------------------------------------')
print('')
print('--- Success! connecting to: ', ip_address)
print('---               Username: ', username)
print('---               Password: ', password)
print('')
print('------------------------------------------------------')

# Close the Telnet session
session.close()
session_log.close()
